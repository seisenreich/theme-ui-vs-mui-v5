{"ast":null,"code":"import _objectSpread from \"/Users/op/Development/Frontend/theme-ui-vs-mui-v5/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\nimport React from 'react';\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\n\nexport var MDXContext = React.createContext({});\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\n\nexport function withMDXComponents(Component) {\n  return boundMDXComponent;\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n\n  function boundMDXComponent(props) {\n    var allComponents = useMDXComponents(props.components);\n    return React.createElement(Component, _objectSpread(_objectSpread({}, props), {}, {\n      allComponents: allComponents\n    }));\n  }\n}\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\n\nexport function useMDXComponents(components) {\n  var contextComponents = React.useContext(MDXContext); // Memoize to avoid unnecessary top-level context changes\n\n  return React.useMemo(function () {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents);\n    }\n\n    return _objectSpread(_objectSpread({}, contextComponents), components);\n  }, [contextComponents, components]);\n}\n/** @type {Components} */\n\nvar emptyObject = {};\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\n\nexport function MDXProvider(_ref) {\n  var components = _ref.components,\n      children = _ref.children,\n      disableParentContext = _ref.disableParentContext;\n  var allComponents = useMDXComponents(components);\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject;\n  }\n\n  return React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, children);\n}","map":{"version":3,"names":["React","MDXContext","createContext","withMDXComponents","Component","boundMDXComponent","props","allComponents","useMDXComponents","components","createElement","contextComponents","useContext","useMemo","emptyObject","MDXProvider","children","disableParentContext","Provider","value"],"sources":["/Users/op/Development/Frontend/theme-ui-vs-mui-v5/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,UAAU,GAAGD,KAAK,CAACE,aAAN,CAAoB,EAApB,CAAnB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,SAA3B,EAAsC;EAC3C,OAAOC,iBAAP;EAEA;AACF;AACA;AACA;;EACE,SAASA,iBAAT,CAA2BC,KAA3B,EAAkC;IAChC,IAAMC,aAAa,GAAGC,gBAAgB,CAACF,KAAK,CAACG,UAAP,CAAtC;IACA,OAAOT,KAAK,CAACU,aAAN,CAAoBN,SAApB,kCAAmCE,KAAnC;MAA0CC,aAAa,EAAbA;IAA1C,GAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsC;EAC3C,IAAME,iBAAiB,GAAGX,KAAK,CAACY,UAAN,CAAiBX,UAAjB,CAA1B,CAD2C,CAE3C;;EACA,OAAOD,KAAK,CAACa,OAAN,CAAc,YAAM;IACzB;IACA,IAAI,OAAOJ,UAAP,KAAsB,UAA1B,EAAsC;MACpC,OAAOA,UAAU,CAACE,iBAAD,CAAjB;IACD;;IAED,uCAAWA,iBAAX,GAAiCF,UAAjC;EACD,CAPM,EAOJ,CAACE,iBAAD,EAAoBF,UAApB,CAPI,CAAP;AAQD;AAED;;AACA,IAAMK,WAAW,GAAG,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAmE;EAAA,IAA7CN,UAA6C,QAA7CA,UAA6C;EAAA,IAAjCO,QAAiC,QAAjCA,QAAiC;EAAA,IAAvBC,oBAAuB,QAAvBA,oBAAuB;EACxE,IAAIV,aAAa,GAAGC,gBAAgB,CAACC,UAAD,CAApC;;EAEA,IAAIQ,oBAAJ,EAA0B;IACxBV,aAAa,GAAGE,UAAU,IAAIK,WAA9B;EACD;;EAED,OAAOd,KAAK,CAACU,aAAN,CACLT,UAAU,CAACiB,QADN,EAEL;IAACC,KAAK,EAAEZ;EAAR,CAFK,EAGLS,QAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module"}